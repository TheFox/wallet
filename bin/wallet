#!/usr/bin/env ruby

require 'tempfile'
require 'bundler/setup'
require 'wallet'
require 'ArgsParser'


parser = ArgsParser.parser
parser.bind(:wallet, :w, 'Wallet', 'wallet')
parser.bind(:title, :t, 'Title')
parser.bind(:date, :d, 'Date', Date.today.to_s)
parser.bind(:revenue, :r, 'Revenue', 0)
parser.bind(:expense, :e, 'Expense', 0)
parser.bind(:category, :c, 'Category')
parser.bind(:comment, :o, 'Comment')
parser.bind(:path, :p, 'Path')

command, params = parser.parse(ARGV)
command = command.to_s

# puts 'command: ' + command.to_s
# puts 'params:  ' + params.to_s
# puts

# Command Aliases
if command == 'i'
	command = 'int'
elsif command == 'l'
	command = 'list'
elsif command == 'lc'
	command = 'cat'
end

wallet = params[:wallet].to_s
title = params[:title].to_s
date = params[:date].to_s
revenue = params[:revenue].to_s.gsub('.', '').sub(/,/, '.').to_f.round(3).abs
category = params[:category].to_s
comment = params[:comment].to_s
path = params[:path].to_s
import = params[:i]

path_is_temp = false

expense = 0.0
export = false
if params[:expense].is_a? TrueClass
	export = true
else
	expense = -params[:expense].to_s.gsub('.', '').sub(/,/, '.').to_f.round(3).abs
end

# puts 'argv len: ' + ARGV.length.to_s
# puts 'command:    ' + '%-10s' % command.class.to_s + '     "' + command.to_s + '"'
# puts 'wallet:     ' + '%-10s' % wallet.class.to_s + '     "' + wallet.to_s + '"'
# puts 'title:      ' + '%-10s' % title.class.to_s + '     "' + title + '"'
# puts 'date:       ' + '%-10s' % date.class.to_s + '     "' + date + '"'
# puts 'revenue:    ' + '%-10s' % revenue.class.to_s + '     "' + revenue.to_s + '"'
# puts 'expense:    ' + '%-10s' % expense.class.to_s + '     "' + expense.to_s + '"'
# puts 'category:   ' + '%-10s' % category.class.to_s + '     "' + category + '"'
# puts 'comment:    ' + '%-10s' % comment.class.to_s + '     "' + comment.to_s + '"'
# puts 'path:       ' + '%-10s' % path.class.to_s + '     "' + path.to_s + '"'
# puts

if command == 'help' || command.length == 0
	script_name = File.basename(__FILE__)
	padding = ' ' * (script_name.length + 8)
	
	puts "#{::TheFox::Wallet::NAME} #{::TheFox::Wallet::VERSION} (#{::TheFox::Wallet::DATE})"
	puts 'Usage: ' + script_name + ' COMMAND OPTIONS'
	puts
	puts 'Commands:'
	puts padding + 'help                Show this help'
	puts padding + 'add                 Add a new entry'
	puts padding + 'i|int               Add a new entry interactively'
	puts padding + 'l|list              List entries'
	puts padding + 'lc|cat              List categories'
	puts padding + 'html                Generate HTML files'
	puts padding + 'csv                 Import/Export CSV file'
	puts padding + 'vi                  Import per VIM editor'
	puts
	puts 'Options:'
	puts padding + '-w|--wallet PATH    Optional'
	puts padding + '-t|--title TITLE    Required for command "add"'
	puts padding + '-d|--date           Optional'
	puts padding + '-r|--revenue        Optional. Default: 0'
	puts padding + '-e|--expense        Optional. Default: 0'
	puts padding + '-c|--category       Optional. Default: default'
	puts padding + '-o|--comment        Optional'
	puts padding + '-i|-e               Import or Export. Default: -i'
	puts padding + '-p|--path PATH      Required for command "csv"'
	
	exit 3
end

if command == 'int'
	command = 'add'
	
	print 'title: [' + title + '] '
	title_t = STDIN.gets.strip
	if title_t.length > 0
		title = title_t
	end
	
	print 'date: [' + date + '] '
	date_t = STDIN.gets.strip
	if date_t.length > 0
		date = date_t
	end
	
	print 'revenue: [' + revenue.to_s + '] '
	revenue_t = STDIN.gets.strip
	if revenue_t.length > 0
		revenue = revenue_t.to_s.gsub('.', '').sub(/,/, '.').to_f.round(3).abs
	end
	
	print 'expense: [' + expense.to_s + '] '
	expense_t = STDIN.gets.strip
	if expense_t.length > 0
		expense = -expense_t.to_s.gsub('.', '').sub(/,/, '.').to_f.round(3).abs
	end
	
	if category.to_s.length == 0
		category = 'default'
	end
	print 'category: [' + category + '] '
	category_t = STDIN.gets.strip
	if category_t.length > 0
		category = category_t
	end
	
	print 'comment: [' + comment + '] '
	comment_t = STDIN.gets.strip
	if comment_t.length > 0
		comment = comment_t
	end
	
	puts '-' * 20
elsif command == 'vi'
	vi_file = Tempfile.create('wallet-vi-import', '/tmp')
	vi_file.puts('# This is a comment line.')
	vi_file.puts('# Date,Title,Revenue,Expense,Category,Comment')
	vi_file.puts('# Date,Title,Expense')
	vi_file.close
	
	puts 'cwd:    ' + Dir.pwd
	puts 'editor: ' + ENV['EDITOR']
	puts 'file:   ' + vi_file.path
	sleep 1
	
	system(ENV['EDITOR'] + ' ' + vi_file.path)
	system('grep -v "#" ' + vi_file.path + ' | grep -v ^$ > ' + vi_file.path + '.ok')
	
	command = 'csv'
	path = vi_file.path + '.ok'
	path_is_temp = true
	import = true
	
	File.unlink vi_file.path
end

wallet = TheFox::Wallet::Wallet.new(wallet)

if command == 'add'
	if category.to_s.length == 0
		category = 'default'
	end
	
	if title == ''
		puts 'ERROR: Option --title is required for command "' + command + '"'
		exit 1
	end
	
	puts 'title:    ' + title
	puts 'date:     ' + Date.parse(date).to_s
	puts 'revenue:  ' + revenue.to_s
	puts 'expense:  ' + expense.to_s
	puts 'balance:  ' + (revenue + expense).to_f.round(3).to_s
	puts 'category: ' + category.to_s
	puts 'comment:  ' + comment.to_s
	
	wallet.add TheFox::Wallet::Entry.new(title, date, revenue, expense, category, comment)
elsif command == 'list'
	puts
	
	year, month, day = date.scan(/^(\d{2,4}).?(\d{0,2}).?(\d{0,2})/).shift.map{ |x|
		y = x.to_i
		y == 0 ? nil : y
	}
	
	entries = wallet.entries(year, month, day, category)
	
	entries_l = entries.map{ |day_name, day_items| day_items.count }.inject{ |sum, n| sum + n }.to_s.length
	title_l = entries.map{ |month_item| month_item[1].map{ |day_item| day_item['title'].length } }.flatten.max.to_i
	revenue_l = entries.map{ |month_item| month_item[1].map{ |day_item| (::TheFox::Wallet::NUMBER_FORMAT % day_item['revenue']).length } }.flatten.max.to_i
	expense_l = entries.map{ |month_item| month_item[1].map{ |day_item| (::TheFox::Wallet::NUMBER_FORMAT % day_item['expense']).length } }.flatten.max.to_i
	balance_l = entries.map{ |month_item| month_item[1].map{ |day_item| (::TheFox::Wallet::NUMBER_FORMAT % day_item['balance']).length } }.flatten.max.to_i
	category_l = entries.map{ |month_item| month_item[1].map{ |day_item| day_item['category'].length } }.flatten.max.to_i
	comment_l = entries.map{ |month_item| month_item[1].map{ |day_item| day_item['comment'].length } }.flatten.max.to_i
	
	has_category_col = entries.map{ |month_item| month_item[1].map{ |day_item| day_item['category'] } }.flatten.select{ |i| i != 'default' }.count > 0
	has_comment_col = entries.map{ |month_item| month_item[1].map{ |day_item| day_item['comment'] } }.flatten.select{ |i| i != '' }.count > 0
	
	if title_l < 6
		title_l = 6
	end
	if title_l > 25
		title_l = 25
	end
	
	if revenue_l < 7
		revenue_l = 7
	end
	if expense_l < 7
		expense_l = 7
	end
	if balance_l < 7
		balance_l = 7
	end
	if category_l < 8
		category_l = 8
	end
	if comment_l > 25
		comment_l = 25
	end
	
	entries_f = '%' + entries_l.to_s + 's'
	title_f = '%-' + title_l.to_s + 's'
	revenue_f = '%' + revenue_l.to_s + 's'
	expense_f = '%' + expense_l.to_s + 's'
	balance_f = '%' + balance_l.to_s + 's'
	category_f = '%-' + category_l.to_s + 's'
	comment_f = '%-' + comment_l.to_s + 's'
	
	header = ''
	header += '#' * entries_l + '  '
	header += 'Date ' + ' ' * 7
	header += title_f % 'Title' + '  '
	header += revenue_f % 'Revenue' + '  '
	header += expense_f % 'Expense' + '  '
	header += balance_f % 'Balance'
	header += '  ' + category_f % 'Category' if has_category_col
	header += '  ' + comment_f % 'Comment' if has_comment_col
	
	header_l = header.length
	header.sub!(/ +$/, '')
	puts header
	puts '-' * header_l
	
	revenue_total = 0.0
	expense_total = 0.0
	balance_total = 0.0
	previous_date = ''
	entry_no = 0
	entries.sort.each do |day_name, day_items|
		day_items.each do |entry|
			entry_no += 1
			
			title = entry['title']
			title = title[0, 22] + '...' if title.length >= 25
			
			revenue_total += entry['revenue']
			expense_total += entry['expense']
			balance_total += entry['balance']
			
			category = entry['category'] == 'default' ? '' : entry['category']
			has_category = category != ''
			
			comment = entry['comment']
			comment = comment[0, 22] + '...' if comment.length >= 25
			
			out = ''
			out += entries_f % entry_no
			out += '  ' + '%10s' % (entry['date'] == previous_date ? '' : entry['date'])
			out += '  ' + title_f % title
			out += '  ' + revenue_f % (::TheFox::Wallet::NUMBER_FORMAT % entry['revenue'])
			out += '  ' + expense_f % (::TheFox::Wallet::NUMBER_FORMAT % entry['expense'])
			out += '  ' + balance_f % (::TheFox::Wallet::NUMBER_FORMAT % entry['balance'])
			out += '  ' + category_f % category if has_category_col
			out += '  ' + comment_f % comment if has_comment_col
			
			out.sub!(/ +$/, '')
			puts out
			
			previous_date = entry['date']
		end
	end
	puts
	
	out = ''
	out += ' ' * (12 + entries_l)
	out += '  ' + title_f % 'TOTAL'
	out += '  ' + revenue_f % (::TheFox::Wallet::NUMBER_FORMAT % revenue_total)
	out += '  ' + expense_f % (::TheFox::Wallet::NUMBER_FORMAT % expense_total)
	out += '  ' + balance_f % (::TheFox::Wallet::NUMBER_FORMAT % balance_total)
	puts out
elsif command == 'cat'
	categories = wallet.categories
	puts 'categories(' + categories.count.to_s + '):'
	categories.each do |category_item|
		puts "\t" + category_item
	end
elsif command == 'html'
	puts 'generate html to ' + wallet.html_path + ' ...'
	wallet.gen_html
	puts 'generate html done'
elsif command == 'csv'
	if path == ''
		puts 'ERROR: Option --path is required for command "' + command + '"'
		exit 1
	end
	
	if import || !export
		puts 'import csv ' + path + ' ...'
		wallet.import_csv_file path
		puts 'import csv ' + path + ' done'
		
		if path_is_temp
			puts 'delete ' + path
			File.unlink(path)
		end
	elsif export
		puts 'export csv ' + path + ' ...'
		wallet.export_csv_file path
		puts 'export csv ' + path + ' done'
	end
end
