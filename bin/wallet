#!/usr/bin/env ruby

require 'optparse'
require 'pathname'
require 'logger'
require 'date'
require 'wallet'

@logger = Logger.new(STDOUT)
@logger.level = Logger::INFO

@options = Hash.new
@options[:logger] = @logger
opts = OptionParser.new do |o|
	o.banner = 'Usage: wallet <command> [options]'
	o.separator('')
	o.separator('Commands:')
	o.separator('')
	o.separator('    add          Add a new entry')
	o.separator('    categories   List categories')
	o.separator('    clear        Clear temp and cache files')
	o.separator('    csv          Import/Export CSV file')
	o.separator('    html         Exports a wallet as HTML')
	o.separator('    list         List entries')
	o.separator('    nagios       Nagios Check')
	o.separator('')
	
	o.on('-w', '--wallet <path>', 'Path to wallet directory.') do |path|
		@options[:wallet_path] = Pathname.new(path).expand_path
	end
	
	o.on('--id <id>', 'ID used for a new entry.') do |id|
		@options[:entry_id] = id
	end
	
	o.on('-t', '--title <title>', 'Title used for a new entry.') do |title|
		@options[:entry_title] = title
	end
	
	o.on('-d', '--date <YYYY-MM-DD>', 'Date used for a new entry.') do |date|
		@options[:entry_date] = date
	end
	
	o.on('--start <YYYY-MM-DD>', 'Start-date used for a range.') do |date|
		@options[:entry_date_start] = Date.parse(date)
	end
	
	o.on('--end <YYYY-MM-DD>', 'End-date used for a range.') do |date|
		@options[:entry_date_end] = Date.parse(date)
	end
	
	o.on('-r', '--revenue <revenue>', 'Revenue used for a new entry.') do |revenue|
		# @TODO replace with Wumber.
		# @options[:entry_revenue] = revenue.to_s.sub(/,/, '.').to_f.abs
		@options[:entry_revenue] = eval(revenue.to_s.to_s.gsub(/,/, '.')).to_f.round(TheFox::Wallet::NUMBER_ROUND).abs
	end
	
	o.on('-e', '--expense <expense>', 'Expense used for a new entry.') do |expense|
		# @TODO replace with Wumber.
		# @options[:entry_expense] = -expense.to_s.sub(/,/, '.').to_f.abs
		@options[:entry_expense] = -eval(expense.to_s.gsub(/,/, '.')).to_f.round(TheFox::Wallet::NUMBER_ROUND).abs
	end
	
	o.on('-c', '--category <category>', 'Category used for a new entry.') do |category|
		@options[:entry_category] = category
	end
	
	o.on('-o', '--comment <comment>', 'Comment used for a new entry.') do |comment|
		@options[:entry_comment] = comment
	end
	
	o.on('--import', 'Import CSV') do
		@options[:is_import] = true
	end
	
	o.on('--export', 'Export CSV') do
		@options[:is_export] = true
	end
	
	o.on('-p', '--path <path>', 'Path used for csv import/export and html directory path.') do |path|
		@options[:path] = path
	end
	
	o.on('-i', '--interactive', 'Use some commands interactively.') do
		@options[:is_interactively] = true
	end
	
	o.on('-f', '--force', 'Force add command.') do
		@options[:force] = true
	end
	
	o.on('--no-force', 'Do not force add command.') do
		@options[:force] = false
	end
	
	o.on('-W', '--warning <number>', 'Warning threshold for Nagios Check command.') do |warning|
		@options[:nagios_warning] = warning.to_f
	end
	
	o.on('-C', '--critical <number>', 'Critical threshold for Nagios Check command.') do |critical|
		@options[:nagios_critical] = critical.to_f
	end
	
	o.on('-T', '--type <string>', 'Expense, Revenue or Balance') do |type|
		type = type.downcase
		if ['e', 'exp', 'expense'].include?(type)
			@options[:entry_type] = :expense
		elsif ['r', 'rev', 'revenue'].include?(type)
			@options[:entry_type] = :revenue
		elsif ['b', 'bal', 'balance', 's', 'sum'].include?(type)
			@options[:entry_type] = :balance
		else
			@options[:entry_type] = nil
		end
	end
	
	o.on('-a', '--above', 'Return OK when sum is above. (default)') do
		@options[:nagios_above] = true
	end
	
	o.on('-b', '--below', 'Return OK when sum is below.') do
		@options[:nagios_above] = false
	end
	
	o.on('-v', '--verbose', 'Log on debug level.') do
		@logger.level = Logger::DEBUG
	end
	
	o.on_tail('-V', '--version', 'Show version.') do
		puts "#{::TheFox::Wallet::NAME} #{::TheFox::Wallet::VERSION} (#{::TheFox::Wallet::DATE})"
		puts TheFox::Wallet::HOMEPAGE
		exit
	end
	
	o.on_tail('-h', '--help', 'Show this message.') do
		puts o
		puts
		exit 3
	end
end
ARGV << '-h' if ARGV.count == 0
commands = opts.parse(ARGV)
command_name = commands.shift

if command_name
	begin
		command = TheFox::Wallet::Command.create_by_name(command_name, @options)
		state = command.run
	rescue Exception => e
		@logger.error(e.to_s)
		state = 1
	end
else
	# Show help page when no argument was given.
	opts.parse(['-h'])
end

exit state
