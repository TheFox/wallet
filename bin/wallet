#!/usr/bin/env ruby

require 'pp'
require 'optparse'
require 'wallet'

options = {
	:wallet_path => 'wallet',
	
	:entry_title => nil,
	:entry_date => Date.today.to_s,
	:entry_revenue => 0.0,
	:entry_expense => 0.0,
	:entry_category => nil,
	:entry_comment => nil,
	
	:is_import => false,
	:is_export => false,
	:path => nil,
	:is_interactively => false,
}
balance = 0.0
opts = OptionParser.new do |o|
	o.banner = 'Usage: wallet <command> [options]'
	o.separator('')
	o.separator('Commands:')
	o.separator('')
	o.separator('    add          Add a new entry')
	o.separator('    list         List entries')
	o.separator('    categories   List categories')
	o.separator('    html         Generate HTML files')
	o.separator('    csv          Import/Export CSV file')
	o.separator('    vi           Import per VIM editor')
	o.separator('')
	
	o.on('-w', '--wallet <path>', 'Path to wallet directory.') do |path|
		options[:wallet_path] = path
	end
	
	o.on('-t', '--title <title>', 'Title used for the entry.') do |title|
		options[:entry_title] = title
	end
	
	o.on('-d', '--date <date>', 'Date used for the entry.') do |date|
		options[:entry_date] = date
	end
	
	o.on('-r', '--revenue <revenue>', 'Revenue used for the entry.') do |revenue|
		options[:entry_revenue] = revenue.to_s.sub(/,/, '.').to_f.abs
		balance += options[:entry_revenue]
	end
	
	o.on('-e', '--expense <expense>', 'Expense used for the entry.') do |expense|
		options[:entry_expense] = -expense.to_s.sub(/,/, '.').to_f.abs
		balance += options[:entry_expense]
	end
	
	o.on('-c', '--category <category>', 'Category used for the entry.') do |category|
		options[:entry_category] = category
	end
	
	o.on('-o', '--comment <comment>', 'Comment used for the entry.') do |comment|
		options[:entry_comment] = comment
	end
	
	o.on('--import', 'Import') do
		options[:is_import] = true
	end
	
	o.on('--export', 'Export') do
		options[:is_export] = true
	end
	
	o.on('-p', '--path <path>', 'Path used for csv import/export.') do |path|
		options[:path] = path
	end
	
	o.on('-i', 'Use some commands interactively.') do
		options[:is_interactively] = true
	end
	
	o.on_tail('-V', '--version', 'Show version.') do
		puts "#{::TheFox::Wallet::NAME} #{::TheFox::Wallet::VERSION} (#{::TheFox::Wallet::DATE})"
		puts TheFox::Wallet::HOMEPAGE
		exit
	end
	
	o.on_tail('-h', '--help', 'Show this message.') do
		puts o
		puts
		exit 3
	end
end
ARGV << '-h' if ARGV.count == 0
commands = opts.parse(ARGV)
command = commands.shift

#pp commands
#pp command

case command
when 'add'
	if options[:entry_category].nil?
		options[:entry_category] = 'default'
	end
	if options[:is_interactively]
		print "title: [#{options[:entry_title]}] "
		title_t = STDIN.gets.strip
		if title_t.length > 0
			options[:entry_title] = title_t
		end
		
		print "date: [#{options[:entry_date]}] "
		date_t = STDIN.gets.strip
		if date_t.length > 0
			options[:entry_date] = date_t
		end
		
		print "revenue: [#{options[:entry_revenue]}] "
		revenue_t = STDIN.gets.strip
		if revenue_t.length > 0
			options[:entry_revenue] = revenue_t.to_s.sub(/,/, '.').to_f.round(3).abs
		end
		
		print "expense: [#{options[:entry_expense]}] "
		expense_t = STDIN.gets.strip
		if expense_t.length > 0
			options[:entry_expense] = -expense_t.to_s.sub(/,/, '.').to_f.round(3).abs
		end
		
		print "category: [#{options[:entry_category]}] "
		category_t = STDIN.gets.strip
		if category_t.length > 0
			options[:entry_category] = category_t
		end
		
		print "comment: [#{options[:entry_comment]}] "
		comment_t = STDIN.gets.strip
		if comment_t.length > 0
			options[:entry_comment] = comment_t
		end
		
		puts '-' * 20
	end
	
	if options[:entry_title].nil?
		puts "ERROR: Option --title is required for command '#{command}'"
		exit 1
	end
	
	puts "title:    '#{options[:entry_title]}'"
	puts "date:      " + Date.parse(options[:entry_date]).to_s
	puts "revenue:   " + TheFox::Wallet::NUMBER_FORMAT % options[:entry_revenue]
	puts "expense:   " + TheFox::Wallet::NUMBER_FORMAT % options[:entry_expense]
	puts "balance:   " + TheFox::Wallet::NUMBER_FORMAT % balance
	puts "category:  #{options[:entry_category]}"
	puts "comment:  '#{options[:entry_comment]}'"
	
	entry = TheFox::Wallet::Entry.new(options[:entry_title], options[:entry_date], options[:entry_revenue], options[:entry_expense], options[:entry_category], options[:entry_comment])
	wallet = TheFox::Wallet::Wallet.new(options[:wallet_path])
	wallet.add(entry)
when 'list'
	puts
	
	year, month, day = options[:entry_date].scan(/^(\d{2,4}).?(\d{0,2}).?(\d{0,2})/).shift.map{ |x|
		y = x.to_i
		y == 0 ? nil : y
	}
	
	wallet = TheFox::Wallet::Wallet.new(options[:wallet_path])
	entries = wallet.entries(year, month, day, options[:entry_category].to_s)
	
	entries_l = entries
		.map{ |day_name, day_items| day_items.count }
		.inject{ |sum, n| sum + n }
		.to_s
		.length
	title_l = entries
		.map{ |month_item| month_item[1].map{ |day_item| day_item['title'].length }}
		.flatten
		.max
		.to_i
	revenue_l = entries
		.map{ |month_item| month_item[1].map{ |day_item| (TheFox::Wallet::NUMBER_FORMAT % day_item['revenue']).length } }
		.flatten
		.max
		.to_i
	expense_l = entries
		.map{ |month_item| month_item[1].map{ |day_item| (TheFox::Wallet::NUMBER_FORMAT % day_item['expense']).length } }
		.flatten
		.max
		.to_i
	balance_l = entries
		.map{ |month_item| month_item[1].map{ |day_item| (TheFox::Wallet::NUMBER_FORMAT % day_item['balance']).length } }
		.flatten
		.max
		.to_i
	category_l = entries
		.map{ |month_item| month_item[1].map{ |day_item| day_item['category'].length } }
		.flatten
		.max
		.to_i
	comment_l = entries
		.map{ |month_item| month_item[1].map{ |day_item| day_item['comment'].length } }
		.flatten
		.max
		.to_i
	
	has_category_col = entries.map{ |month_item| month_item[1].map{ |day_item| day_item['category'] } }.flatten.select{ |i| i != 'default' }.count > 0
	has_comment_col = entries
		.map{ |month_item| month_item[1].map{ |day_item| day_item['comment'] } }
		.flatten
		.select{ |i| i != '' }
		.count > 0
	
	if title_l < 6
		title_l = 6
	end
	if title_l > 25
		title_l = 25
	end
	
	if revenue_l < 7
		revenue_l = 7
	end
	if expense_l < 7
		expense_l = 7
	end
	if balance_l < 7
		balance_l = 7
	end
	if category_l < 8
		category_l = 8
	end
	if comment_l > 25
		comment_l = 25
	end
	
	entries_f = '%' + entries_l.to_s + 's'
	title_f = '%-' + title_l.to_s + 's'
	revenue_f = '%' + revenue_l.to_s + 's'
	expense_f = '%' + expense_l.to_s + 's'
	balance_f = '%' + balance_l.to_s + 's'
	category_f = '%-' + category_l.to_s + 's'
	comment_f = '%-' + comment_l.to_s + 's'
	
	header = ''
	header += '#' * entries_l + '  '
	header += 'Date ' + ' ' * 7
	header += title_f % 'Title' + '  '
	header += revenue_f % 'Revenue' + '  '
	header += expense_f % 'Expense' + '  '
	header += balance_f % 'Balance'
	header += '  ' + category_f % 'Category' if has_category_col
	header += '  ' + comment_f % 'Comment' if has_comment_col
	
	header_l = header.length
	header.sub!(/ +$/, '')
	puts header
	puts '-' * header_l
	
	revenue_total = 0.0
	expense_total = 0.0
	balance_total = 0.0
	previous_date = ''
	entry_no = 0
	entries.sort.each do |day_name, day_items|
		day_items.each do |entry|
			entry_no += 1
			
			title = entry['title']
			title = title[0, 22] + '...' if title.length >= 25
			
			revenue_total += entry['revenue']
			expense_total += entry['expense']
			balance_total += entry['balance']
			
			category = entry['category'] == 'default' ? '' : entry['category']
			has_category = category != ''
			
			comment = entry['comment']
			comment = comment[0, 22] + '...' if comment.length >= 25
			
			out = ''
			out += entries_f % entry_no
			out += '  ' + '%10s' % (entry['date'] == previous_date ? '' : entry['date'])
			out += '  ' + title_f % title
			out += '  ' + revenue_f % (TheFox::Wallet::NUMBER_FORMAT % entry['revenue'])
			out += '  ' + expense_f % (TheFox::Wallet::NUMBER_FORMAT % entry['expense'])
			out += '  ' + balance_f % (TheFox::Wallet::NUMBER_FORMAT % entry['balance'])
			out += '  ' + category_f % category if has_category_col
			out += '  ' + comment_f % comment if has_comment_col
			
			out.sub!(/ +$/, '')
			puts out
			
			previous_date = entry['date']
		end
	end
	puts
	
	out = ''
	out += ' ' * (12 + entries_l)
	out += '  ' + title_f % 'TOTAL'
	out += '  ' + revenue_f % (TheFox::Wallet::NUMBER_FORMAT % revenue_total)
	out += '  ' + expense_f % (TheFox::Wallet::NUMBER_FORMAT % expense_total)
	out += '  ' + balance_f % (TheFox::Wallet::NUMBER_FORMAT % balance_total)
	puts out
when 'categories'
	wallet = TheFox::Wallet::Wallet.new(options[:wallet_path])
	categories = wallet.categories
	puts "categories: #{categories.count}"
	puts "\t" + categories.join("\n\t")
when 'html'
	wallet = TheFox::Wallet::Wallet.new(options[:wallet_path])
	puts 'generate html to ' + wallet.html_path + ' ...'
	wallet.gen_html
	puts 'generate html done'
when 'csv'
	if options[:is_interactively]
		vi_file = Tempfile.create('wallet-vi-import', '/tmp')
		vi_file.puts('# This is a comment line.')
		vi_file.puts('# Date,Title,Revenue,Expense,Category,Comment')
		vi_file.puts('# Date,Title,Expense')
		vi_file.puts
		vi_file.puts
		vi_file.close
		
		puts 'cwd:    ' + Dir.pwd
		puts 'editor: ' + ENV['EDITOR']
		puts 'file:   ' + vi_file.path
		
		system("#{ENV['EDITOR']} #{vi_file.path}")
		system("grep -v '#' #{vi_file.path} | grep -v ^$ > #{vi_file.path}.ok")
		
		options[:path] = "#{vi_file.path}.ok"
		File.unlink(vi_file.path)
	end
	
	if options[:path].nil?
		puts "ERROR: Option --path is required for command '#{command}'"
		exit 1
	end
	
	wallet = TheFox::Wallet::Wallet.new(options[:wallet_path])
	
	if options[:is_import] || !options[:is_export]
		puts "import csv #{options[:path]} ..."
		wallet.import_csv_file(options[:path])
		puts "import csv #{options[:path]} done"
		
		if options[:is_interactively]
			puts "delete #{options[:path]}"
			File.unlink(options[:path])
		end
	elsif options[:is_export]
		puts "export csv #{options[:path]} ..."
		wallet.export_csv_file(options[:path])
		puts "export csv #{options[:path]} done"
	end
end
